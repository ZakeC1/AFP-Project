\begin{code}
module GameTheoryFinal where
open import MLTT.Spartan
open import Fin.Type
open import MLTT.Athenian
            hiding (Fin ; 𝟎 ; 𝟏 ; 𝟐 ; 𝟑 ; 𝟒 ; 𝟓 ; 𝟔 ; 𝟕 ; 𝟖 ; 𝟗)
open import TypeTopology.DiscreteAndSeparated
open import TypeTopology.SigmaDiscreteAndTotallySeparated
open import TypeTopology.CompactTypes
open import Fin.Topology
\end{code}

Creating the tree data type and defining an empty tree as []. Larger trees are generated by using the _∷_.

\begin{code}
data Tree : Set₁ where
  []  : Tree
  _∷_ : (X : Type) (Xf : X → Tree) → Tree
\end{code}

Paths of the tree defined inductively. The empty tree doesn't have any vertices so it's just the unit type 𝟙 whereas any other path in a tree is generated by a vertex on a level where there is a shorter path linking that vertex to the root. This is then repeated inductively until the root/empty tree is reached. So x would be the head of the path (a vertex at the bottom of the tree) and the Path (Xf x) is the tail of this path.

\begin{code}
pattern ⟨⟩       = ⋆ 
pattern _::_ x xs = (x , xs)

Path : Tree → Type
Path []       = 𝟙
Path (X ∷ Xf) = Σ x ꞉ X , Path (Xf x)

path-head : {X : Type} {Xf : X → Tree} → Path (X ∷ Xf) → X
path-head (x :: xs) = x

path-tail : {X : Type} {Xf : X → Tree} ((x :: xs) : Path (X ∷ Xf)) → Path (Xf x)
path-tail (x :: xs) = xs

path-length : {Xt : Tree} → Path Xt → ℕ
path-length {[]}     ⟨⟩        = 0
path-length {X ∷ Xf} (x :: xs) = succ (path-length {Xf x} xs)
\end{code}

We now go through the example with Connect 4 and define the type of outcomes as:

\begin{code}
Outcome : Type
Outcome = Fin 3
\end{code}

As well as defining the players and the meaning of each outcome.

\begin{code}
data Player : Type where
  Red Blue : Player

oppenent : Player → Player
oppenent Red = Blue
oppenent Blue = Red

Red-wins Draw Blue-wins : Outcome
Red-wins = 𝟎
Draw = 𝟏
Blue-wins = 𝟐
\end{code}

The board is required so that the players can play their game. This is defined by a type of board (p , A) where p is the player who plays next and the board A is the current state of the game's board. The grid represents the Connect 4 Grid which is a 6x7.

\begin{code}
Grid = Fin 6 × Fin 7
Matrix = Grid → Maybe Player
Board = Player × Matrix
\end{code}

Where the initial board is defined with an empty grid and Red to play first shown by:

\begin{code}
start : Board
start = Red , λ _ → Nothing
\end{code}

Checks if a player has won by comparing all possible Connect 4s and the current players positions. This is done by providing a player (Red or Blue) and the current state of the game. Then by matching the current player to each spot of the grid and the relevant spaces related to each spot to see if they have a Connect 4. If the player has a Connect 4 then true will be returned, otherwise there is not a connect 4 so false is given.

\begin{code}
--Matching the maybes to the corresponding players so booleans can represent them instead when finding all possible Connect 4s.
_is_ : Maybe Player → Player → Bool
Nothing is _ = false
Just Red  is Red = true
Just Blue  is Red = false
Just Red  is Blue = false
Just Blue  is Blue = true

-- Ensures that is takes precedence so less brackets can be used.
infix 100 _is_

-- Checks if a player given has won yet.
wins : Player → Matrix → Bool
wins p M = lines || cols || diags
  where

    -- Finds all row connect 4s in a given row of the board
    lineRow : Fin 6 → Bool
    lineRow x = M (x , 𝟎) is p && M (x , 𝟏) is p && M (x , 𝟐) is p && M (x , 𝟑) is p ||
              M (x , 𝟏) is p && M (x , 𝟐) is p && M (x , 𝟑) is p && M (x , 𝟒) is p ||
              M (x , 𝟐) is p && M (x , 𝟑) is p && M (x , 𝟒) is p && M (x , 𝟓) is p ||
              M (x , 𝟑) is p && M (x , 𝟒) is p && M (x , 𝟓) is p && M (x , 𝟔) is p
    -- All row connect 4s in the entire board
    lines = lineRow 𝟎 || lineRow 𝟏 || lineRow 𝟐 || lineRow 𝟑 || lineRow 𝟒 || lineRow 𝟓

    -- Finds all column connect 4s in a specified column
    lineCol : Fin 7 → Bool
    lineCol x = M (𝟎 , x) is p && M (𝟏 , x) is p && M (𝟐 , x) is p && M (𝟑 , x) is p ||
                M (𝟏 , x) is p && M (𝟐 , x) is p && M (𝟑 , x) is p && M (𝟒 , x) is p ||
                M (𝟐 , x) is p && M (𝟑 , x) is p && M (𝟒 , x) is p && M (𝟓 , x) is p
    -- Finds all column connect 4s in the entire board
    cols = lineCol 𝟎 || lineCol 𝟏 || lineCol 𝟐 || lineCol 𝟑 || lineCol 𝟒 || lineCol 𝟓 || lineCol 𝟔

    -- Fin successor so diagonal can be defined easier
    FinSucc6 : Fin 6 → Fin 6
    FinSucc6 𝟎 = 𝟏
    FinSucc6 𝟏 = 𝟐
    FinSucc6 𝟐 = 𝟑
    FinSucc6 𝟑 = 𝟒
    FinSucc6 𝟒 = 𝟓
    -- Successor of 𝟓 won't be used as connect 4 doesn't wrap around the board so irrelevant here
    FinSucc6 𝟓 = 𝟎
    -- Finds all diagonals based on row position going diagonally downwards left to right and also right to left
    lineDiag : Fin 6 → Bool
    lineDiag x = M (x , 𝟎) is p && M (FinSucc6 x , 𝟏) is p && M (FinSucc6 (FinSucc6 x) , 𝟐) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟑) is p ||
                 M (x , 𝟏) is p && M (FinSucc6 x , 𝟐) is p && M (FinSucc6 (FinSucc6 x) , 𝟑) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟒) is p ||
                 M (x , 𝟐) is p && M (FinSucc6 x , 𝟑) is p && M (FinSucc6 (FinSucc6 x) , 𝟒) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟓) is p ||
                 M (x , 𝟑) is p && M (FinSucc6 x , 𝟒) is p && M (FinSucc6 (FinSucc6 x) , 𝟓) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟔) is p ||
                 -- Finds the opposite diagonal (right to left diagonal)
                 M (x , 𝟔) is p && M (FinSucc6 x , 𝟓) is p && M (FinSucc6 (FinSucc6 x) , 𝟒) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟑) is p ||
                 M (x , 𝟓) is p && M (FinSucc6 x , 𝟒) is p && M (FinSucc6 (FinSucc6 x) , 𝟑) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟐) is p ||
                 M (x , 𝟒) is p && M (FinSucc6 x , 𝟑) is p && M (FinSucc6 (FinSucc6 x) , 𝟐) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟏) is p ||
                 M (x , 𝟑) is p && M (FinSucc6 x , 𝟐) is p && M (FinSucc6 (FinSucc6 x) , 𝟏) is p && M (FinSucc6 (FinSucc6 (FinSucc6 x)) , 𝟎) is p 
    -- Finds all diagonal connect 4s of the entire board
    diags = lineDiag 𝟎 || lineDiag 𝟏 || lineDiag 𝟐
\end{code}

We make a function to denote that an empty slot is playable by a simple match of booleans on Nothing or the players.

\begin{code}
isNoth_ : Maybe Player → Bool
isNoth Nothing = true
isNoth Just p = false
\end{code}

Defined the empty set and we have EmptySquare to find the first empty slot in a given column as the moves viable to a player is based on this. If the column is full then no empty square so the empty set is returned. Using if to ensure that no further space is found after the first one is.

\begin{code}
data EmptySet : Set where

EmptySquareCol : Board → Fin 7 → Set
EmptySquareCol (p , m) col = if (isNoth (m (𝟎 , col))) then (m (𝟎 , col) ＝ Nothing)
                           else if (isNoth (m (𝟏 , col))) then (m (𝟏 , col) ＝ Nothing)
                           else if (isNoth (m (𝟐 , col))) then (m (𝟐 , col) ＝ Nothing)
                           else if (isNoth (m (𝟑 , col))) then (m (𝟑 , col) ＝ Nothing)
                           else if (isNoth (m (𝟒 , col))) then (m (𝟒 , col) ＝ Nothing)
                           else if (isNoth (m (𝟓 , col))) then (m (𝟓 , col) ＝ Nothing)
                           else EmptySet                           
\end{code}

Finding all viable moves for the current player and board by creating a set of all empty sqaures. The viable empty squares are found by using the previous function so only the bottom of each empty column is part of the set of playable moves. Done by passing each column into the EmptySquare function as shown. So a maximum of 7 total moves could be found if none of the columns are full.

\begin{code}
Move : Board → Set (𝓤₀ ⊔ 𝓤₀)
Move (p , m) = Σ col ꞉ Fin 7 , EmptySquareCol (p , m) col 
\end{code}

Therefore, we have defined the outline of the initial games and provided the definitions requires to generate a tree of all possible moves. Each player can find their viable moves and the board can be checked if there is currently a win. Future steps would be the generate the tree and to have the players play their best moves based upon the tree. However the tree for Connect 4 is extremely large due to the possibilities the piece's positions so program in Agda may be slow when processing the information.

In conclusion, an overview of the code for the Connect 4 game is shown.
