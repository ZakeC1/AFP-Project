\begin{code}
module GameTheoryDraft where
open import MLTT.Spartan
open import Fin.Type
open import MLTT.Athenian
            hiding (Fin ; 𝟎 ; 𝟏 ; 𝟐 ; 𝟑 ; 𝟒 ; 𝟓 ; 𝟔 ; 𝟕 ; 𝟖 ; 𝟗)
\end{code}

Creating the tree data type and defining an empty tree as [] and generating larger trees by using the _∷_.
\begin{code}
data Tree : Set₁ where
  []  : Tree
  _∷_ : (X : Type) (Xf : X → Tree) → Tree

\end{code}

Paths of the tree defined inductively. The empty tree doesn't have any vertices so is just the unit type 𝟙 whereas any other path in a tree is generated by a vertex on a level where there is a shorter path linking that vertex to the root. This is then repeated inductively until the root and empty tree is reached. So x would be the head of the path (a vertex at the bottom of the tree) and the Path (Xf x) is the tail of this path.

\begin{code}

pattern ⟨⟩       = ⋆ 
pattern _::_ x xs = (x , xs)

Path : Tree → Type
Path []       = 𝟙
Path (X ∷ Xf) = Σ x ꞉ X , Path (Xf x)

path-head : {X : Type} {Xf : X → Tree} → Path (X ∷ Xf) → X
path-head (x :: xs) = x

path-tail : {X : Type} {Xf : X → Tree} ((x :: xs) : Path (X ∷ Xf)) → Path (Xf x)
path-tail (x :: xs) = xs

path-length : {Xt : Tree} → Path Xt → ℕ
path-length {[]}     ⟨⟩        = 0
path-length {X ∷ Xf} (x :: xs) = succ (path-length {Xf x} xs)

\end{code}

We now go through the example with Connect 4 and define the type of outcomes as:

\begin{code}
Outcome : Type
Outcome = Fin 3
\end{code}

As well as defining the players and the meaning of each outcome.

\begin{code}
data Player : Type where
  Red Blue : Player

oppenent : Player → Player
oppenent Red = Blue
oppenent Blue = Red

P1-wins draw P2-wins : Outcome
P1-wins = 𝟎
draw = 𝟏
P2-wins = 𝟐
\end{code}

The board is required so that the players can play their game. This is defined by a type of boards where for a board (p , A) where p is the player who plays next and the board A is the current state of the game's board.

\begin{code}
Grid = Fin 7 × Fin 7
Matrix = Grid → Maybe Player
Board = Player × Matrix

\end{code}
Where the initial board is defined with an empty grid and Red to play first shown by:

\begin{code}
start-board : Board
start-board = Red , λ _ → Nothing
\end{code}

All the wins can be defined by matching on all possible combinations of 4 in a row. This is done by providing a player so Red or Blue and the current state of the game. Then by matrching the current player to each spot of the grid and comparing them to relevant spaces if they also contain the same player's pieces which would result in a connect 4. If this does then true will be returned, otehrwise there is not a connect 4 so false is given.

\begin{code}

_is_ : Maybe Player → Player → Bool
Nothing is _ = false
Just Red  is Red = true
Just Blue  is Red = false
Just Red  is Blue = false
Just Blue  is Blue = true
    
wins : Player → Matrix → Bool
wins p M = line || col || diag
  where

    line1 = {!!}
    line2 = {!!}

    col1 = {!!}
    col2 = {!!}

    diag1 = {!!}
    diag2 = {!!}

    line = line1 || line2
    col = col1 || col2
    diag = diag1 || diag2
\end{code}
Find first empy square in a column.
\begin{code}

isNoth_ : Maybe Player → Bool
isNoth Nothing = true
isNoth _ = false

Fina : Fin 7 → Bool
Fina (inl (inl (inl x))) = {!!}
Fina (inl (inl (inr x))) = {!!}
Fina (inl (inr x)) = {!!}
Fina (inr x) = {!!}

EmptySquare : {n : ℕ} → Board → Maybe (Fin n)
EmptySquare (p , m) = {!!} --goal
  where
    goal : {n : ℕ} (x : Fin n) → Maybe (Fin n)
    goal x with (isNoth (m (𝟎 , {!!})))
    ... | true = Just {!x!}
    ... | false = if {!x == 7!} then Nothing else {!goal (fsucc x)!}
    --(x == ((((((𝟘 + 𝟙) + 𝟙) + 𝟙) + 𝟙) + 𝟙) + 𝟙) + 𝟙)

data EmptySet : Set where


EmptySquare1 : Board → Fin 7 → Set
EmptySquare1 (p , m) col =      if (isNoth (m (𝟎 , col))) then (m (𝟎 , col) ＝ Nothing)
                           else if (isNoth (m (𝟏 , col))) then (m (𝟏 , col) ＝ Nothing)
                           else if (isNoth (m (𝟐 , col))) then (m (𝟐 , col) ＝ Nothing)
                           else if (isNoth (m (𝟑 , col))) then (m (𝟑 , col) ＝ Nothing)
                           else if (isNoth (m (𝟒 , col))) then (m (𝟒 , col) ＝ Nothing)
                           else if (isNoth (m (𝟓 , col))) then (m (𝟓 , col) ＝ Nothing)
                           else if (isNoth (m (𝟔 , col))) then (m (𝟔 , col) ＝ Nothing)
                           else EmptySet
                           

Move : Board → Set (𝓤₀ ⊔ 𝓤₀)
Move (p , m) = Σ x ꞉ Fin 7 , EmptySquare1 (p , m) x -- Σ (x , y) ꞉ Grid , m (𝟎 , y) ＝ Nothing

    --Grid1 : Set
    --Grid1 = Σ (x , y) ꞉ Grid , b (x , y) ＝ Nothing


\end{code}

